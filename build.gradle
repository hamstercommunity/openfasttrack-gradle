plugins {
    id 'java-gradle-plugin'
    id 'jacoco'
    id 'pl.droidsonroids.jacoco.testkit' version '1.0.3'
    id 'com.gradle.plugin-publish' version '0.10.1'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'org.sonarqube' version '2.7'
}

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/itsallcode/itsallcode" }
}

version = '0.6.2'
group = 'org.itsallcode'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext {
  gradlePluginId = 'org.itsallcode.openfasttrace'
  oftVersion = '2.3.5'
  if(project.hasProperty('oftSourceDir')) {
    oftSourceDir = file(project.oftSourceDir)
    useOftSources = oftSourceDir.exists()
    if(!useOftSources) {
      logger.warn "OFT source directory $oftSourceDir does not exist"
    }
  } else {
    oftSourceDir = 'oft-dir-not-found'
    useOftSources = false
  }
}


def compiledClassesFolders(File dir) {
    def classDirs = new HashSet()
    file(dir).eachFileRecurse(groovy.io.FileType.DIRECTORIES) {
        String normalizedName = it.toString().replace('\\', '/')
        if(normalizedName.endsWith('/target/classes') && !normalizedName.contains('testutil')) {
        	classDirs.add(it)
        }
    }
    return classDirs
}

dependencies {
    if(useOftSources) {
        logger.lifecycle "Including OpenFastTrace sources from Maven target dir $oftSourceDir"
        implementation files(compiledClassesFolders(oftSourceDir)) {
            builtBy "compileOft"
        }
    } else {
        implementation "org.itsallcode.openfasttrace:openfasttrace:$oftVersion"
    }
    testImplementation 'junit:junit:4.12'
}

task compileOft(type: Exec) {
    workingDir oftSourceDir
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'mvn.cmd', 'resources:resources', 'compiler:compile'
    } else {
        commandLine "mvn", 'resources:resources', 'compiler:compile'
    }
}

clean {
    def exampleProjects = rootProject.file('example-projects').listFiles()
    def propertyFiles = exampleProjects.collect{new File(it, 'gradle.properties')}
    propertyFiles.each { delete it }
}


gradlePlugin {
    plugins {
        openFastTracePlugin {
            id = gradlePluginId
            implementationClass = 'org.itsallcode.openfasttrace.gradle.OpenFastTracePlugin'
        }
    }
}

pluginBundle {
  website = 'https://github.com/itsallcode/openfasttrace-gradle'
  vcsUrl = 'https://github.com/itsallcode/openfasttrace-gradle'
  description = 'Gradle plugin for tracing requirements using OpenFastTrace'
  tags = ['requirementstracing', 'requirements', 'tracing', 'reqtracing', 'openfasttrace', 'oft']

  plugins {
    openFastTracePlugin {
      id = gradlePluginId
      displayName = 'OpenFastTrace requirements tracing plugin'
    }
  }
}

test {
    testLogging {
        showStandardStreams = true
    }
}

test.onlyIf { rootProject.name == 'openfasttrace-gradle' }

publishPlugins.dependsOn check

license {
    header = file('gradle/license-header.txt')
    strictCheck = true
    skipExistingHeaders = false
    ext.year = 2017
    ext.name = "It's all code"
    ext.email = 'christoph at users.sourceforge.net'
}

downloadLicenses {
    includeProjectDependencies = true
    ignoreFatalParseErrors = false
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}
